plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
    id 'org.moddedmc.wiki.toolkit' version '+'
}

version =  property("mod.version") + "+" + stonecutter.current.version
group = "dev.imb11"

base {
    archivesName = property("mod.name")
}

wiki {
    docs {
        "extra-shields" {
            root = rootProject.file("docs/")
            exportedAssetNamespaces = ['shields']
        }
    }

    // If local.properties exists, load WIKI_ACCESS_TOKEN property into "wikiAccessToken =" field.
    if (rootProject.file("local.properties").exists()) {
        def localProperties = new Properties()
        localProperties.load(rootProject.file("local.properties").newDataInputStream())
        wikiAccessToken = localProperties.getProperty("WIKI_ACCESS_TOKEN")
    }
}

repositories {
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${property("deps.mc")}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${property("deps.mc")}:${property("deps.parchment")}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"

    modImplementation include("maven.modrinth:fabricshieldlib:${property("deps.fabric_shield_lib")}")
    modImplementation include("maven.modrinth:midnightlib:${property("deps.midnightlib")}")
    modImplementation include("com.github.Chocohead:Fabric-ASM:v2.3")

    modCompileOnly modRuntimeOnly("maven.modrinth:emi:${property("runtime.emi")}")
    modCompileOnly modRuntimeOnly("maven.modrinth:modmenu:${property("runtime.modmenu")}")

    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementation include("org.apache.commons:commons-text:1.13.0")
}

fabricApi {
    configureDataGeneration() {
        client = true
        modId = "shields"
        createSourceSet = true
        outputDirectory = project.getRootDir().toPath().resolve("src/main/generated").toFile()
    }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand 'mod_version': project.version,
                'target_minecraft': project.property('mod.target'),
                'target_fabric_api': project.property("deps.fabric_api")
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
    var version = stonecutter.eval(stonecutter.current.version, ">1.20.4") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
    sourceCompatibility = version
    targetCompatibility = version
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

tasks.named('processResources') {
    from("$rootDir/docs") {
        into "assets/oracle_index/books/shields"
        exclude '.assets/item/**'   // items are rendered ingame as actual item components, no need to include them here
    }
    doLast {
        println "processResources executed: wiki folder copied into assets/oracle_index"
    }
}